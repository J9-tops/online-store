// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Status {
    Hot
    New
    Sale
    Undefined
}

enum UserRole {
    Admin
    Vendor
    User  



model Sale {
    id             String  @id @default(cuid())
    title          String
    description    String
    discountBadge  String
    discountAmount Float
    couponCode     String
    validFrom      String
    validUntil     String
    isActive       Boolean
    imageUrl       String

    @@unique([title, description])
    @@index([title])
}

}

model Product {
    id          String @id @default(cuid())
    title       String
    slug        String
    imageUrl    String
    description String
    label       String
    price       Float
    stock       Int
    status      Status

    categories Category[]

    @@unique([title, description])
    @@index([title])
}


model Category {
    id          String    @id @default(cuid())
    title       String
    slug        String
    description String
    products    Product[]

    @@unique([title, description])
    @@index([title])
}




model User {
  id        String   @id @default(cuid())
  createdAt DateTime
  updatedAt DateTime

  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  role          UserRole  @default(User)
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  sessions Session[]
  accounts Account[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}


